@typeparam TSortItem where TSortItem : struct, Enum

<div class="d-flex flex-column flex-md-row align-items-center mb-4">
    <!-- Sort Dropdown -->
    <div class="mb-2 mb-md-0 me-md-2 col-md-4">
        <InputSelect @bind-Value="SortChoice" class="form-select me-2 col-md-12" @bind-Value:after="OnValueChanged">
            <option value="">None</option>
            @foreach (var item in MyGetEnumValuesAndNames<TSortItem>())
            {
                <option value="@(item.Key)">@(item.Value)</option>
            }
        </InputSelect>
    </div>

    <!-- Search Bar -->
    <div class="search-bar mb-2 mb-md-0 col-md-4">
        <input type="text" @bind="searchQuery" @oninput="OnSearch" placeholder="Search by @SearchPlaceHolder ..." class="form-control" />
    </div>

    <!-- Add New Button -->
    @if (AddNewString != null)
    {
        <div class="col-md-2">
            <a class="btn btn-success btn-sm p-2 w-100" type="button" href="@AddNewLink">Add new @AddNewString</a>
        </div>
    }
   
</div>




@code {

    [Parameter] public TSortItem? SortChoice { get; set; }
    [Parameter] public EventCallback<TSortItem?> SortChoiceChanged { get; set; }
    [Parameter]
    public string? searchQuery { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnSearch { get; set; }


    [Parameter]
    public string? SearchPlaceHolder { get; set; }

    [Parameter]
    public string? AddNewLink { get; set; }
    [Parameter]
    public string? AddNewString { get; set; }
    private async Task OnValueChanged()
    {
        await SortChoiceChanged.InvokeAsync(SortChoice);
    }

    private IDictionary<object, string> MyGetEnumValuesAndNames<TEnumType>() where TEnumType : struct, Enum
    {
        Dictionary<object, string> enumDictionary = []; //new Dictionary<object, string>() //new()
        var names = Enum.GetNames(typeof(TEnumType));
        int index = 0;
        foreach (var item in Enum.GetValues(typeof(TEnumType)))
        {
            enumDictionary[item] = names[index];
            index++;
        }
        return enumDictionary;
    }

}
