@implements IDisposable

@foreach (var message in _validationMessages)
{
    <div class="validation-message" @attributes="this.AdditionalAttributes">
        @message
    </div>
}

@code {
    private EditContext? _previousEditContext;
    private FieldIdentifier _fieldIdentifier;
    private IEnumerable<string> _validationMessages => CurrentEditContext.GetValidationMessages(_fieldIdentifier);

    [CascadingParameter] EditContext CurrentEditContext { get; set; } = default!;
    [Parameter] public object? Model { get; set; }
    [Parameter, EditorRequired] public string? FieldName { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    protected override void OnParametersSet()
    {
        if (CurrentEditContext is null || this.FieldName is null)
            throw new InvalidOperationException($"The Edit Context and/or FieldName are missing!");

        _fieldIdentifier = new(this.Model ?? this.CurrentEditContext.Model, this.FieldName);

        if (CurrentEditContext != _previousEditContext)
        {
            DetachValidationStateChangedListener();
            CurrentEditContext.OnValidationStateChanged += this.OnValidationStateChanged;
            _previousEditContext = CurrentEditContext;
        }
    }

    private void OnValidationStateChanged(object? sender, ValidationStateChangedEventArgs e)
        => StateHasChanged();

    private void DetachValidationStateChangedListener()
    {
        if (_previousEditContext != null)
            _previousEditContext.OnValidationStateChanged -= OnValidationStateChanged;
    }

    void IDisposable.Dispose()
    {
        DetachValidationStateChangedListener();
    }
}