@using System.Reflection
@using SimpleBookCatalog.Domain
@using System.ComponentModel.DataAnnotations

@typeparam TModel


<EditForm Enhance="true" method="post" autocomplete="off" Model="@Model" OnValidSubmit="@HandleFormSubmit">
    <DataAnnotationsValidator/>
    @foreach (var property in typeof(TModel).GetProperties())
    {
        var isForForm = property.GetCustomAttribute<IsForFormAttribute>()?.IsForForm ?? false;
        var isStringWithoutNumbers = property.GetCustomAttribute<isStringWithoutNumbers>()?.IsStringWithoutNumbers ?? false;
        

        if (EditMode)
        {
            <input type="hidden" name="@GetPropertyIdName()" value="@GetPropertyIdValue()" />
        }

        var displayName = property.GetCustomAttribute<DisplayNameAttribute>()?.Name ?? property.Name;

        @if (IsString(property.PropertyType) && isForForm && !isStringWithoutNumbers)
        {
            <div class="mb-3">
                <label for="@property.Name" class="form-label">
                    @displayName
            </label>
            <input id="@property.Name"
                   type="text"
                   class="form-control shadow-none"
                   value="@GetStringValue(property)"
                   @onchange="(e) => property.SetValue(Model, e.Value)" />
                <BlazorValidationMessage FieldName="@property.Name" />
            </div>


    }
        else if (IsString(property.PropertyType) && isForForm && isStringWithoutNumbers)
        {
            <div class="mb-3">
                <label for="@property.Name" class="form-label">
                    @displayName
                </label>

                <input id="@property.Name"
                       type="text"
                       class="form-control shadow-none"
                       value="@GetStringValue(property)"
                       @oninput="(e) => CheckInput(e, property)" />
                <BlazorValidationMessage FieldName="@property.Name" />
                @if (!string.IsNullOrEmpty(WarningMessage))
                {
                    
                    <div class="text-danger">@WarningMessage</div> <!-- Displays the warning in red text -->
                }
            </div>
        }
        else if (IsInt(property.PropertyType) && isForForm)
        {
            <div class="mb-3">
            <label for="@property.Name" class="form-label">
                    @displayName
                </label>

                <input id="@property.Name"
                       class="form-control shadow-none"
                       type="number"
                       value="@(GetNullableIntValue(property)?.ToString() ?? string.Empty)"
                       @oninput="(e) => SetNullableIntValue(property, string.IsNullOrEmpty(e.Value.ToString()) ? (int?)null : int.Parse(e.Value.ToString()))" />
                <BlazorValidationMessage FieldName="@property.Name" />

            </div>
        }
        else if (IsDecimal(property.PropertyType) && isForForm)
        {
            <div class="mb-3">
                <label for="@property.Name" class="form-label">
                    @displayName
                </label>
                <input id="@property.Name"
                       class="form-control shadow-none"
                       type="number"
                       step="0.01"
                       value="@(GetNullableDecimalValue(property)?.ToString() ?? string.Empty)"
                       @onchange="(e) => SetNullableDecimalValue(property, string.IsNullOrEmpty(e.Value.ToString()) ? (decimal?)null : decimal.Parse(e.Value.ToString()))" />
                <BlazorValidationMessage FieldName="@property.Name" />

            </div>
        }
        else if (IsDate(property.PropertyType) && isForForm)
        {
            <div class="mb-3">
                <label for="@property.Name" class="form-label">@displayName</label>
                <input id="@property.Name"
                       type="date"
                       class="form-control shadow-none"
                       value="@GetDateValue(property)"
                       @onchange="(e) => HandleDateChange(e.Value.ToString(), property)" />
                                <BlazorValidationMessage FieldName="@property.Name" />

            </div>
        }
        else if (IsEnum(property.PropertyType) && isForForm)
        {
            <div class="mb-3">
            <label for="category" class="form-label">
                @displayName

            </label>
            <select id="@property.Name"
                         class="form-control shadow-none"
                         value="@GetEnumValue(property)"
                         @onchange="e => SetEnumValue(property, e.Value)">
                <option value="0">Select @displayName</option>
                @foreach (var enumValue in Enum.GetValues(property.PropertyType))
                {
                    <option value="@enumValue">@enumValue.ToString()</option>
                    
                }
            </select>
                <BlazorValidationMessage FieldName="@property.Name" />

            </div>
        }
        else if (IsAuthor(property.PropertyType) && FilterEligibleAuthors().Any() )
            {
                            <div class="mb-3">

            <EditFormGenericForEntities TModel="TModel"
                                        TItem="Author"
                                        Model="Model"
                                        Items="FilterEligibleAuthors()"
                                        DisplayPropertyName="FullName"
                                        DisplayLabelName="Authors"
                                        DisplayPropertyNameForOptionSelect="Author"
                                        IdChildName="AuthorId"
            IdPropertyName="Id" />
                <BlazorValidationMessage FieldName="AuthorId" />
            </div>
        }
        else if (IsPublisher(property.PropertyType) && Publishers != null)
        {
                        <div class="mb-3">

                <EditFormGenericForEntities TModel="TModel"
                                            TItem="Publisher"
                                            Model="Model"
                                            Items="Publishers"
                                            DisplayPropertyName="Name"
                                            DisplayLabelName="Publishers"
                                            DisplayPropertyNameForOptionSelect="Publisher"
                                            IdChildName="PublisherId"
                                            IdPropertyName="Id" />
                <BlazorValidationMessage FieldName="PublisherId" />
            </div>
            
        }
        else if (property.Name == "GenreId" && Genres != null )
        {
                        <div class="mb-3">

                <EditFormGenericForEntities TModel="TModel"
                                            TItem="Genre"
                                            Model="Model"
                                            Items="Genres"
                                            DisplayPropertyName="Name"
                                            DisplayLabelName="Genres"
                                            DisplayPropertyNameForOptionSelect="Genre"
                                            IdChildName="GenreId"
                                            IdPropertyName="Id" />

                <BlazorValidationMessage FieldName="@property.Name" />
            </div>
            
        }

    }


    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Submit</button>
        <a href="@backToList" class="btn btn-secondary shadow-none ms-3">Back to List</a>
    </div>

</EditForm>

@code {
    private Timer? debounceTimer;

    [Parameter]
    public TModel? Model { get; set; }

    [Parameter]
    public EventCallback<TModel> OnValidSubmit { get; set; }

    [Parameter]
    public string backToList{ get; set; }

    [Parameter] public List<Author>? Authors { get; set; }
    [Parameter] public List<Publisher>? Publishers { get; set; }
    [Parameter] public List<Genre>? Genres { get; set; }
    [Parameter] public bool EditMode{ get; set; }
    private DateTime? PublicationDate
    {
        get => (DateTime?)Model?.GetType().GetProperty(nameof(PublicationDate))?.GetValue(Model);
        set => Model?.GetType().GetProperty(nameof(PublicationDate))?.SetValue(Model, value);
    }
    private string WarningMessage { get; set; } = string.Empty;

    private object selectedEnumValue;

    private bool IsEnum(Type type) => type.IsEnum;
    private bool IsString(Type type) => type == typeof(string);

    private bool IsDate(Type type) => type == typeof(DateTime) || type == typeof(DateTime?);

    private bool IsInt(Type type) => type == typeof(int) || type == typeof(int?);
    private bool IsDecimal(Type type) => type == typeof(decimal) || type == typeof(decimal?);

    private bool IsAuthor(Type type) => type == typeof(Author);
    private bool IsPublisher(Type type) => type == typeof(Publisher);
    private bool IsGenre(Type type) => type == typeof(Genre);
    private Task HandleFormSubmit()
    {
        return OnValidSubmit.InvokeAsync(Model);
    }


    //------------------Id getter setter------------------------
    private string GetPropertyIdName()
    {
        return $"{typeof(TModel).Name}.{"Id"}";
    }

    private object GetPropertyIdValue()
    {   
        var property = typeof(TModel).GetProperty("Id");
        return property?.GetValue(Model);
    }

    //------------------Int input fields getter setter------------------------
    private int? GetNullableIntValue(System.Reflection.PropertyInfo property)
    {
        var value = property.GetValue(Model);
        return value != null ? (int?)Convert.ToInt32(value) : null;
    }

    private void SetNullableIntValue(System.Reflection.PropertyInfo property, int? value)
    {
        property.SetValue(Model, value);
    }

    //------------------Decimal input fields getter setter------------------------
    private decimal? GetNullableDecimalValue(System.Reflection.PropertyInfo property)
    {
        var value = property.GetValue(Model);
        return value != null ? (decimal?)Convert.ToDecimal(value) : null;
    }
    private void SetNullableDecimalValue(System.Reflection.PropertyInfo property, decimal? value)
    {
        property.SetValue(Model, value);
    }

    //------------------String input fields getter setter------------------------
    private string GetStringValue(System.Reflection.PropertyInfo property)
    {
        var value = property.GetValue(Model);
        return value?.ToString() ?? string.Empty;
    }

    private void SetStringValue(System.Reflection.PropertyInfo property, string value)
    {
        property.SetValue(Model, value);
    }

    //------------------Enum input fields getter setter------------------------
    private object GetEnumValue(System.Reflection.PropertyInfo property)
    {
        return property.GetValue(Model) ?? string.Empty; // Return empty string if the value is null
    }

    private void SetEnumValue(System.Reflection.PropertyInfo property, object value)
    {
        if (Enum.TryParse(property.PropertyType, value?.ToString(), out var enumValue))
        {
            property.SetValue(Model, enumValue);
            selectedEnumValue = enumValue; // Update the selected value after setting it
        }
    }

    //------------------Date input fields getter setter------------------------
    private string GetDateValue(System.Reflection.PropertyInfo property)
    {
        var value = property.GetValue(Model);
        return value is DateTime dateValue ? dateValue.ToString("yyyy-MM-dd") : string.Empty;
    }

    private void HandleDateChange(string value, System.Reflection.PropertyInfo property)
    {
        if (DateTime.TryParse(value, out var dateValue))
        {
            property.SetValue(Model, dateValue);

            // If the changed property is the publication date, update the publication date in the code
            if (property.Name == nameof(PublicationDate))
            {
                PublicationDate = dateValue;
            }
        }
        else
        {
            property.SetValue(Model, null);
        }
    }



    //------------------Filter authors and enable/disable input------------------------
    private bool IsAuthorSelectDisabled(TModel model)
    {
        if (PublicationDate == null)
            return true;

        return !FilterEligibleAuthors().Any();
    }


    private List<Author> FilterEligibleAuthors()
    {
        if (PublicationDate == null)
            return new List<Author>();

        return Authors
            .Where(author => author.DateOfBirth.HasValue &&
                             (PublicationDate.Value.Year - author.DateOfBirth.Value.Year >= 18))
            .ToList();
    }


    private async Task CheckInput(ChangeEventArgs e, PropertyInfo property)
    {
        string input = e.Value?.ToString() ?? string.Empty;

        //I use a timer to check for the value if has integer inside the input
        //Because without the timer it didnt worked

        debounceTimer?.Change(Timeout.Infinite, 0); // Cancel the previous timer
        debounceTimer = new Timer(async _ =>
        {
            await Task.Run(() =>
            {
                if (input.Any(char.IsDigit))
                {
                    WarningMessage = "Numbers are not allowed. The input has been cleared.";
                    input = string.Empty; // Clear the input
                }
                else
                {
                    WarningMessage = string.Empty; // Clear the warning if input is valid
                }

                // Update the model's property value
                property.SetValue(Model, input);

                InvokeAsync(StateHasChanged); // Ensure StateHasChanged is invoked on the correct context
            });
        }, null, 100, Timeout.Infinite); // Debounce interval (300ms)

        // Immediate update for the current input
        property.SetValue(Model, input);
    }





}