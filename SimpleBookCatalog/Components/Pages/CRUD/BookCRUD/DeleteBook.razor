@page "/confirm-delete-book/{Id:int}"
@rendermode InteractiveServer //onClick works because of this

@inject IBookRepository Repository
@inject NavigationManager Navigation

<PageTitle>
    Confirm Delete
</PageTitle>
@if (book != null)
{
    <div class="row justify-content-center">
        <div class="col-6">
            <h3>Are you sure you want to delete @book.Title ?</h3>
            <div class="actions">
                <button class="btn btn-danger shadow-none" @onclick="ConfirmDelete">
                    Yes
                </button>
                <button class="btn btn-secondary shadow-none" @onclick="CancelDelete">
                    No
                </button>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public required int Id{ get; set; }

    public Book? book { get; set; }
    protected override async Task OnInitializedAsync()
    {
        book = await Repository.GetByIdAsync(Id);
        await Task.CompletedTask;
    }
    private async Task ConfirmDelete()
    {
        Console.WriteLine("ConfirmDelete button clicked"); // Debugging line
        try
        {
            if (book != null)
            {
                await Repository.DeleteAsync(book.Id);
                Navigation.NavigateTo("/show-books");
            }
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting book: {ex.Message}");
        }
    }

    private void CancelDelete()
    {
        Console.WriteLine("CancelDelete button clicked"); // Debugging line
        Navigation.NavigateTo("/show-books");
    }
}
