@inject IAuthorRepository repositoryAuthors
@inject IBookRepository repositoryBooks
@inject NavigationManager Navigation
@using SimpleBookCatalog.Components.ReusableComponents

@if (Author is not null)
{

<EditForm Enhance="true" FormName="AddOrEditAuthorForm" Model="Author">
        <EditFormGeneric 
            TModel="Author" 
            Model="Author" 
            Authors="null" 
            Publishers="null" 
            Genres="null" 
            OnValidSubmit="HandleAuthorSubmit" 
            EditMode="IsEditMode" 
            backToList="/show-authors" />
        <DataAnnotationsValidator/>
        <ValidationSummary/>
</EditForm>
    
}
@code {
    [Parameter]
    public bool IsEditMode { get; set; } = false;

    [Parameter]
    public int AuthorId { get; set; }

    [Parameter]
    public EventCallback<Author> OnValidAuthorSubmit { get; set; }

    [SupplyParameterFromForm]
    public Author? Author { get; set; }

    private string Title => IsEditMode ? $"Edit Author {Author.FirstName + " " + Author.Surname}" : "Add New Author";

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode)
        {
            Author ??= await repositoryAuthors.GetByIdAsync(AuthorId);
        }
        else
        {
            Author ??= new Author();
        }
    }

    private async Task HandleAuthorSubmit()
    {
        if (IsEditMode)
        {
            await repositoryAuthors.UpdateAsync(Author);
            Navigation.NavigateTo("/show-authors");
        }
        else
        {
            await repositoryAuthors.AddAsync(Author);
            Navigation.NavigateTo("/show-authors");
        }


    }
}
