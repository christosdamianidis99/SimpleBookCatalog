@page "/show-books"
@inject IBookRepository BookRepository
@inject IGenreRepository GenreRepository

@using SimpleBookCatalog.Components.ReusableComponents


<div class="books-page container">
    <h3 class="books-title">Books</h3>
    <!-- Sort Search AddNew-->
    <ReusableSortAddSearch TSortItem="SortTypeBooks"
                           @bind-SortChoice="SortChoice"
                           @bind-SortChoice:after="OnSortChanged"
                           searchQuery="@searchQuery"
                           OnSearch="SearchBooks"
                           SearchPlaceHolder="title"
                           AddNewLink="@($"/add-new-book")"
                           AddNewString="book">
    </ReusableSortAddSearch>

    <!-- Books List -->
    <ReusableLoopForShow TItem="Book" TCard="BookCard"
                         Items="books"
                         FilteredItems="filteredBooks"
                         SortItems="items => SortBooksEnumerable(items)"
                         SortFilteredItems="items => SortFilteredBooksEnumerable(items)" />




</div>

@code {

    [Parameter] public SortTypeBooks? SortChoice { get; set; }
    private List<Book> books = new List<Book>();
    private string? searchQuery { get; set; }
    private IEnumerable<Book>? filteredBooks;
    // Mock authors, genres, and publishers to use in mock data
    private List<Author> mockAuthors = MockAuthorData.GetMockAuthors();
    private List<Publisher> mockPublishers = MockPublisherData.GetMockPublishers();

    protected override async Task OnInitializedAsync()
    {
        await LoadBooksAsync();
    }

    private async Task LoadBooksAsync()
    {
        // Get real books from the database or API
        var realBooks = await BookRepository.GetAllAsync();
        var mockGenres = await GenreRepository.GetAllAsync();
        // Get mock books
        var mockBooks = MockBookData.GetMockBooks(mockAuthors, mockGenres, mockPublishers);

        // Combine real and mock books
        books = realBooks.Concat(mockBooks).ToList();

        // Optionally apply sorting or filtering logic if needed
        filteredBooks = SortBooksEnumerable(books);
    }

    private IEnumerable<Book> SortBooksEnumerable(IEnumerable<Book> books)
    {

        if (books == null) return Enumerable.Empty<Book>();

        return SortChoice switch
        {
            SortTypeBooks.NameAsc => books.OrderBy(b => b.Title),
            SortTypeBooks.NameDesc => books.OrderByDescending(b => b.Title),
            SortTypeBooks.PageAsc => books.OrderBy(b => b.NumberOfPages),
            SortTypeBooks.PagesDesc => books.OrderByDescending(b => b.NumberOfPages),
            SortTypeBooks.BooksSold => books.OrderBy(b => b.NumberOfBooksSold),
            SortTypeBooks.PublishDate => books.OrderBy(b => b.PublicationDate),
            _ => books,
        };
    }

    private IEnumerable<Book> SortFilteredBooksEnumerable(IEnumerable<Book> filteredBooks)
    {
        if (filteredBooks == null) return Enumerable.Empty<Book>();

        return SortChoice switch
        {
            SortTypeBooks.NameAsc => filteredBooks.OrderBy(b => b.Title),
            SortTypeBooks.NameDesc => filteredBooks.OrderByDescending(b => b.Title),
            SortTypeBooks.PageAsc => filteredBooks.OrderBy(b => b.NumberOfPages),
            SortTypeBooks.PagesDesc => filteredBooks.OrderByDescending(b => b.NumberOfPages),
            SortTypeBooks.BooksSold => filteredBooks.OrderBy(b => b.NumberOfBooksSold),
            SortTypeBooks.PublishDate => filteredBooks.OrderBy(b => b.PublicationDate),
            _ => filteredBooks,
        };
    }


    private async Task OnSortChanged()
    {
        await Task.Delay(200);
    }


    private void SearchBooks(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredBooks = books; // Show all books if search query is empty
        }
        else
        {
            filteredBooks = books.Where(b => CommonMechanics.SearchGeneric(b, searchQuery));
        }
    }
}
