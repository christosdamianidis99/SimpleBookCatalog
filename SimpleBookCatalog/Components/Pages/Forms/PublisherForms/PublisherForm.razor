@inject IPublisherRepository repositoryPublishers
@inject IBookRepository repositoryBooks
@inject NavigationManager Navigation
@using SimpleBookCatalog.Components.ReusableComponents

@if (Publisher is not null)
{
    <EditForm Enhance="true"  FormName="AddOrEditPublisherForm" Model="Publisher">

        <EditFormGeneric 
        TModel="Publisher" 
        Model="Publisher" 
        Authors="null"
        Publishers="null" 
        Genres="null" 
        OnValidSubmit="AddOrEditPublisher"
        EditMode="IsEditMode" backToList="/show-publishers"/>

        <DataAnnotationsValidator />
        <ValidationSummary />

    </EditForm>
    
}
@code {
    [Parameter]
    public bool IsEditMode { get; set; } = false;

    [Parameter]
    public int PublisherId { get; set; }

    [Parameter]
    public EventCallback<Publisher> OnValidAuthorSubmit { get; set; }

    [SupplyParameterFromForm]
    public Publisher? Publisher { get; set; }

    private string Title => IsEditMode ? $"Edit Publisher {Publisher?.Name}" : "Add New Publisher";

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode)
        {
            Publisher ??= await repositoryPublishers.GetByIdAsync(PublisherId);
        }
        else
        {
            Publisher ??= new Publisher();
        }
    }

    private async Task AddOrEditPublisher()
    {

        if(Publisher!=null)
        {
            if (IsEditMode)
            {
                await repositoryPublishers.UpdateAsync(Publisher);
                Navigation.NavigateTo("/show-publishers");
            }
            else
            {
                await repositoryPublishers.AddAsync(Publisher);
                Navigation.NavigateTo("/show-publishers");
            }
        }
        


    }
}
