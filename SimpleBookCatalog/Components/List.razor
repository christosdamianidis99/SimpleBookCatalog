@page "/"
@inject IBookRepository BookRepository
@inject IGenreRepository GenreRepository
@using SimpleBookCatalog.Components.ReusableComponents
@using SimpleBookCatalog.Components.Pages.Forms.BookForms

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

<PageTitle>Book List</PageTitle>
<h1 class="row justify-content-center">Book List</h1>
<div class="shelf"></div>
<!-- Bookshelf grid layout -->
<div class="book-grid">
    @foreach (var book in books)
    {
        <div class="book" @onclick="()=>SelectBook(book)">
            <div class="book-cover"></div>
            <div class="book-details">
                <div class="book-title">@(book.Title??"N/A")</div>
                <div class="book-author">by @(book.Author?.FullName??"N/A")</div>
                <div class="book-publisher">@(book.Publisher?.Name??"N/A")</div>
                <div class="book-pages">@(book.NumberOfPages??0) pages</div>
                <div class="book-price">@(book.Price.ToString()??"N/A")</div>
            </div>
        </div>
    }
</div>

<div class="shelf"></div>

<!-- Selected Book Details -->
@if (selectedBook != null)
{
    <div class="book-details">
        <h2 class="book-details-title">Details for: @selectedBook.Title</h2>

        <!-- Additional book details -->
        <div class="details-container">
            <div class="detail-item">
                <span class="detail-label">Author:</span>
                <span class="detail-value">@selectedBook.Author.FullName</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Publisher:</span>
                <span class="detail-value">@selectedBook.Publisher.Name</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Pages:</span>
                <span class="detail-value">@selectedBook.NumberOfPages</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Price:</span>
                <span class="detail-value">@(selectedBook.Price?.ToString("C") ?? "N/A")</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Published:</span>
                <span class="detail-value">@(selectedBook.PublicationDate?.ToString("MMM dd, yyyy")??"N/A")</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Description:</span>
                <span class="detail-value">@selectedBook.Summary</span>
            </div>
        </div>
    </div>
}

@code {
    private List<Book> books = new List<Book>();
    private IEnumerable<Book>? filteredBooks;
    private Book? selectedBook; // Store selected book details
    [Parameter] public SortTypeBooks? SortChoice { get; set; }


    // Mock authors, genres, and publishers to use in mock data
    private List<Author> mockAuthors = MockAuthorData.GetMockAuthors();
    private List<Publisher> mockPublishers = MockPublisherData.GetMockPublishers();


    protected override async Task OnInitializedAsync()
    {
        // Populate the Books list from your database or API
        await LoadBooksAsync();
    }

    private async Task LoadBooksAsync()
    {
        // Get real books from the database or API
        var realBooks = await BookRepository.GetAllAsync();
        var mockGenres = await GenreRepository.GetAllAsync();
        // Get mock books
        var mockBooks = MockBookData.GetMockBooks(mockAuthors, mockGenres, mockPublishers);

        // Combine real and mock books
        books = realBooks.Concat(mockBooks).ToList();

        // Optionally apply sorting or filtering logic if needed
        filteredBooks = SortBooksEnumerable(books);
    }
    private void SelectBook(Book book)
    {
        selectedBook = book;
    }
    private IEnumerable<Book> SortBooksEnumerable(IEnumerable<Book> books)
    {
        if (books == null) return Enumerable.Empty<Book>();

        return SortChoice switch
        {
            SortTypeBooks.NameAsc => books.OrderBy(b => b.Title),
            SortTypeBooks.NameDesc => books.OrderByDescending(b => b.Title),
            SortTypeBooks.PageAsc => books.OrderBy(b => b.NumberOfPages),
            SortTypeBooks.PagesDesc => books.OrderByDescending(b => b.NumberOfPages),
            SortTypeBooks.BooksSold => books.OrderBy(b => b.NumberOfBooksSold),
            SortTypeBooks.PublishDate => books.OrderBy(b => b.PublicationDate),
            _ => books,
        };
    }

    private IEnumerable<Book> SortFilteredBooksEnumerable(IEnumerable<Book> filteredBooks)
    {
        if (filteredBooks == null) return Enumerable.Empty<Book>();

        return SortChoice switch
        {
            SortTypeBooks.NameAsc => filteredBooks.OrderBy(b => b.Title),
            SortTypeBooks.NameDesc => filteredBooks.OrderByDescending(b => b.Title),
            SortTypeBooks.PageAsc => filteredBooks.OrderBy(b => b.NumberOfPages),
            SortTypeBooks.PagesDesc => filteredBooks.OrderByDescending(b => b.NumberOfPages),
            SortTypeBooks.BooksSold => filteredBooks.OrderBy(b => b.NumberOfBooksSold),
            SortTypeBooks.PublishDate => filteredBooks.OrderBy(b => b.PublicationDate),
            _ => filteredBooks,
        };
    }
}
